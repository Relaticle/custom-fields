name: Scheduled Checks

on:
  schedule:
    # Run every Monday at 8:00 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  dependency-updates:
    runs-on: ubuntu-latest
    name: Check for Dependency Updates

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: dom, curl, libxml, mbstring, zip

      - name: Check for outdated Composer dependencies
        run: |
          composer install --no-interaction
          echo "## Outdated Composer Dependencies" >> $GITHUB_STEP_SUMMARY
          composer outdated --direct --major-only --format=json > outdated.json || true
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "null" ]; then
            echo "Found outdated dependencies:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat outdated.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "All dependencies are up to date! ✅" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for outdated npm dependencies
        run: |
          npm ci
          echo "## Outdated NPM Dependencies" >> $GITHUB_STEP_SUMMARY
          npm outdated --json > npm-outdated.json || true
          if [ -s npm-outdated.json ] && [ "$(cat npm-outdated.json)" != "{}" ]; then
            echo "Found outdated npm dependencies:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat npm-outdated.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "All npm dependencies are up to date! ✅" >> $GITHUB_STEP_SUMMARY
          fi

  security-scan:
    runs-on: ubuntu-latest
    name: Comprehensive Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: dom, curl, libxml, mbstring, zip

      - name: Install dependencies
        run: composer install --no-interaction

      - name: Run Composer security audit
        run: |
          echo "## Composer Security Audit" >> $GITHUB_STEP_SUMMARY
          composer audit --format=json > composer-audit.json || true
          if [ -s composer-audit.json ]; then
            vulnerabilities=$(jq '.vulnerabilities | length' composer-audit.json)
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "⚠️ Found $vulnerabilities vulnerabilities:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              cat composer-audit.json >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "No security vulnerabilities found! ✅" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Run npm security audit
        run: |
          echo "## NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --json > npm-audit.json || true
          if [ -s npm-audit.json ]; then
            vulnerabilities=$(jq '.metadata.vulnerabilities.total' npm-audit.json)
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "⚠️ Found $vulnerabilities npm vulnerabilities:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              jq '.vulnerabilities' npm-audit.json >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "No npm security vulnerabilities found! ✅" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  code-quality-deep-scan:
    runs-on: ubuntu-latest
    name: Deep Code Quality Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, gd

      - name: Install dependencies
        run: composer install --no-interaction

      - name: Run comprehensive code audit
        run: |
          echo "## Comprehensive Code Audit Results" >> $GITHUB_STEP_SUMMARY
          composer run code-audit > code-audit-output.txt 2>&1 || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -50 code-audit-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Generate complexity metrics
        run: |
          # Count lines of code
          echo "## Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "### Lines of Code" >> $GITHUB_STEP_SUMMARY
          find src -name "*.php" -exec wc -l {} + | tail -1 | awk '{print "PHP: " $1 " lines"}' >> $GITHUB_STEP_SUMMARY
          find tests -name "*.php" -exec wc -l {} + | tail -1 | awk '{print "Tests: " $1 " lines"}' >> $GITHUB_STEP_SUMMARY
          find resources -name "*.css" -o -name "*.js" -exec wc -l {} + | tail -1 | awk '{print "Frontend: " $1 " lines"}' >> $GITHUB_STEP_SUMMARY
          
          # Count files
          echo "### File Count" >> $GITHUB_STEP_SUMMARY
          echo "PHP files: $(find src -name "*.php" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "Test files: $(find tests -name "*.php" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "Blade files: $(find resources -name "*.blade.php" | wc -l)" >> $GITHUB_STEP_SUMMARY

  health-check:
    runs-on: ubuntu-latest
    name: Repository Health Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check repository health
        run: |
          echo "## Repository Health Check" >> $GITHUB_STEP_SUMMARY
          
          # Check for important files
          echo "### Required Files Check" >> $GITHUB_STEP_SUMMARY
          for file in README.md CHANGELOG.md composer.json package.json phpunit.xml; do
            if [ -f "$file" ]; then
              echo "✅ $file exists" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $file missing" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Check Git repository statistics
          echo "### Git Statistics" >> $GITHUB_STEP_SUMMARY
          echo "Total commits: $(git rev-list --all --count)" >> $GITHUB_STEP_SUMMARY
          echo "Contributors: $(git shortlog -sn | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "Branches: $(git branch -r | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "Latest commit: $(git log -1 --format='%h - %s (%cr)')" >> $GITHUB_STEP_SUMMARY
          
          # Check for large files
          echo "### Large Files Check" >> $GITHUB_STEP_SUMMARY
          large_files=$(find . -type f -size +1M -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./.git/*" | head -10)
          if [ -n "$large_files" ]; then
            echo "Large files found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$large_files" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "$size - $file" >> $GITHUB_STEP_SUMMARY
            done
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "No large files found ✅" >> $GITHUB_STEP_SUMMARY
          fi